{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AAEbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAc;AAAA;;AAEV,0BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;oDAEsB;;AAEnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA6BD,OAA7B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;;AAE/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,6BAHD;;AAKAR,wCAAYS,SAAZ,GAAwB,aAAK;;AAE3B,oCAAI,CAAChB,UAAL,EAAiB;AACfA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAW;AAC5B,8CAAM,IAAIE,KAAJ,CAAW,+CAAX,CAAN;AACD,qCAFD;AAGD;;AAEDE,wCAAQL,UAAR;AACD,6BAXD;;AAaAO,wCAAYW,OAAZ,GAAsB,aAAK;;AAEvBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;;AAEAf,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,6BALD;AAMH,yBA5BM,CAAP;AA6BH;;;kDACoBtB,U,EAAY;;AAE7BH,+BAAO0B,OAAP,CAAe,iBAAS;;AAEpB,gCAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAgD1B,WAAW2B,iBAAX,CAA6BD,KAA7B;AAChD1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,yBAJD;AAKH;;;sDAEwB;AACvB,4BAAI7B,UAAJ,EAAgB;AACfC;AACAD,yCAAa,IAAb;AACA;AACF;;;;;;;;AACN","file":"ConnectionFactory.js","sourcesContent":["  const stores = ['negociacoes'];\r\n  const version = 4;\r\n  const dbName = 'aluraframe';\r\n\r\n  let connection = null;\r\n  \r\n  let close = null;\r\n  \r\n  export class ConnectionFactory {\r\n  \r\n      constructor() {\r\n  \r\n          throw new Error('Não é possível criar instâncias de ConnectionFactory');\r\n      }\r\n  \r\n      static getConnection() {\r\n  \r\n          return new Promise((resolve, reject) => {\r\n  \r\n              let openRequest = window.indexedDB.open(dbName,version);\r\n  \r\n              openRequest.onupgradeneeded = e => {\r\n  \r\n                  ConnectionFactory._createStores(e.target.result);\r\n              };\r\n  \r\n              openRequest.onsuccess = e => {    \r\n  \r\n                if (!connection) {\r\n                  connection = e.target.result;\r\n                  close = connection.close.bind(connection)\r\n                  connection.close = function() {\r\n                    throw new Error ('Você não pode fechar diretamente esta conexão');\r\n                  }\r\n                }\r\n                  \r\n                resolve(connection);\r\n              };\r\n  \r\n              openRequest.onerror = e => {    \r\n  \r\n                  console.log(e.target.error);\r\n  \r\n                  reject(e.target.error.name);\r\n              };\r\n          });\r\n      }\r\n      static _createStores(connection) {\r\n  \r\n          stores.forEach(store => {\r\n  \r\n              if(connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\r\n              connection.createObjectStore(store, { autoIncrement: true });\r\n          });\r\n      }\r\n\r\n      static closeConnection() {\r\n        if (connection) {\r\n\t        close();\r\n\t        connection = null;\r\n        }\r\n      }\r\n};\r\n"]}